#!/usr/bin/python
# -*- coding: UTF-8 -*-
 
import xml.sax
import json
import io
 
class premissionXmlHandler( xml.sax.ContentHandler ):
   def __init__(self):
      self.premissions = []
      self.count = 0
 
   # 元素开始事件处理
   def startElement(self, tag, attributes):
      self.CurrentData = tag
      if(tag == 'tr'):
         self.count = 0
      if(tag == 'span'):
         self.count = self.count + 1
      #print("startElement: ", tag, attributes, self.count)
 
   # 元素结束事件处理
   def endElement(self, tag):
      #print("endElement: ", tag)
      #self.CurrentData = ""
      pass
 
   # 内容事件处理
   def characters(self, content):
      #print("characters: ", content, self.count)
      if self.count == 2:
         self.premissions.append(content)
         #print("characters", content)
         self.count = 0

   def getPremissions(self):
      return self.premissions



def extractPermissionsDict():
   # 创建一个 XMLReader
   parser = xml.sax.make_parser()
   # turn off namepsaces
   parser.setFeature(xml.sax.handler.feature_namespaces, 0)
 
   # 重写 ContextHandler
   Handler = premissionXmlHandler()
   parser.setContentHandler( Handler )
   
   parser.parse("Manifest.permission  _  Android Developers.html")

   premissions = Handler.getPremissions()
   values = extractSchemaValue(file = "Manifest.permission  _  Android Developers_total.html", begin_schema = "Constant Value:", end_schema = "</p>")

   print(premissions)
   print(len(premissions))
   print(len(values))
   pres = {
      "reference": "https://developer.android.com/reference/android/Manifest.permission",
      "premissions": premissions,
      "values": values
   }
   with open("permissions.json", "w") as f:
        json.dump(pres, f, indent=4)

def extractUsedFeatures():
   values = extractSchemaValue(file="_uses-feature_  _  Android Developers.html", begin_schema = '<dt>\n    <code translate="no" dir="ltr">', end_schema = "</code>")
   #print(values)
   features = {
      "reference": "https://developer.android.com/guide/topics/manifest/uses-feature-element",
      "used_features": values,
   }
   with open("used_features.json", "w") as f:
        json.dump(features, f, indent=4)  


def extractIntentActions():
   values = extractSchemaValue(file="Intent  _  Android Developers.html", begin_schema = 'Value: <code translate="no" dir="ltr">"android.intent.action', end_schema = "</code>", prefix = '"android.intent.action')
   actions = {
      "reference": "https://developer.android.com/reference/kotlin/android/content/Intent?hl=en",
      "actions": values
   }
   with open("intent_actions.json", "w") as f:
        json.dump(actions, f, indent=4)  


def extractSchemaValue(file, begin_schema, end_schema, prefix = None):
   values = []
   with open(file, encoding = "UTF-8") as f:
   #f = io.open(file)   
      lines = f.read()
      pos = 0
      try:
         while True:
            pos = lines.index(begin_schema, pos) + len(begin_schema)
            end = lines.index(end_schema, pos)
            permission_value = lines[pos:end].strip(" \n")
            if prefix:
               permission_value = prefix + permission_value
            if permission_value.startswith("\'") or permission_value.startswith("\""):
               permission_value = permission_value[1:-1]
            values.append(permission_value)
      except Exception as e:
         pass
   return values


if ( __name__ == "__main__"):
   #extractPermissionsDict()
   #extractPermissionValue()
   #extractUsedFeatures()
   extractIntentActions()