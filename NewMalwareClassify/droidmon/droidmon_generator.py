# -*- coding: utf8 -*-
import subprocess
import shutil
import threading
import time
import os
from DynamicAnalyzer.views.android.shared import (get_identifier)


def download_logs(adb, download_dir):
    log_temp_path = os.path.join(download_dir, 'x_logcat_temp.txt')
    subprocess.call([adb,
                     "-s",
                     get_identifier(),
                     "pull",
                     "/data/data/de.robv.android.xposed.installer/log/error.log",
                     log_temp_path])
    print(time.time(), "[INFO] Downloading Droidmon API Monitor Logcat logs", log_temp_path)
    # TODO: 下载其他有用文件
    return

def droidmon_download(adb, download_dir, package):
    if not os.path.isdir(download_dir):
        os.makedirs(download_dir)
    start_time = int(time.time())

    while True:
        cur_time = int(time.time())
        if cur_time - start_time > 60:
            break
        download_logs(adb, download_dir)
        log_path = os.path.join(download_dir, 'x_logcat.txt')
        log_temp_path = os.path.join(download_dir, 'x_logcat_temp.txt')
        if os.path.exists(log_path):
            log_size = os.path.getsize(log_path)
            log_temp_size = os.path.getsize(log_temp_path)
            if log_size < log_temp_size:
                shutil.copy(log_temp_path, log_path)
        else:
            shutil.copy(log_temp_path, log_path)
        os.remove(log_temp_path)
        time.sleep(6)
    return

def start_download(adb, download_dir, package):
    t = threading.Thread(target=droidmon_download, args=(adb, download_dir, package))
    t.start()
    return t