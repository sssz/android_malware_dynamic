import os
import sys
import copy
import time
import json

from androguard.core.bytecodes import apk

from utils import (yield_app_paths, yield_app_paths2, save_json)
from dynamic.droidmon.droidmon_analysis import get_droidmon_apis, get_droidmon_apis_flow
from static.tools.string_parser import STRING_PARSER

def dynamic_analysis_one(file_path, result):
    start_time = time.time()

    app = apk.APK(file_path)
    droidmon_log = os.path.join(file_path + "_info", "x_logcat.txt")
    get_droidmon_apis(droidmon_log, app.get_package(), result)
    '''
        permission + intent_action + command + content urls + api
        permissions = permission_from_string + permission_from_api
        intent_action = intent_action_from_string
        command = intent_action_from_string
        content urls = from_string
        api = api
    '''

    time_cost = time.time() - start_time
    return time_cost


def dynamic_analysis_one_flow(file_path):
    start_time = time.time()
    result = []
    app = apk.APK(file_path)
    droidmon_log = os.path.join(file_path + "_info", "x_logcat.txt")
    get_droidmon_apis_flow(droidmon_log, app.get_package(), result)
    time_cost = time.time() - start_time
    return time_cost, result

def dynamic_analysis(root):
    total_time = 0
    cnt = 0
    print("dynamic start: ", time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
    for app in yield_app_paths(root):
        abs_path = os.path.join(root, app)
        json_file = os.path.join(abs_path + "_info", "dynamic.json")
        if os.path.isfile(json_file):
            print("dynamic exists")
            continue

        app_dynamic_result = {}
        try:
            time_cost = dynamic_analysis_one(abs_path, app_dynamic_result)

            app_dynamic_result['time_cost'] = time_cost

            save_json(app_dynamic_result, json_file)


            cnt += 1
            total_time += time_cost
        except Exception as e:
            print('[dynamic_analysis] path: ', abs_path, "Exception: ", e)
        #break
    print("dynamic finish: ", time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
    print("average time_cost: ", total_time*1.0/cnt)


def dynamic_analysis2(root):
    total_time = 0
    cnt = 0
    print("dynamic start: ", time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
    for sub_root, app in yield_app_paths2(root):
        abs_path = os.path.join(sub_root, app)
        json_file = os.path.join(abs_path + "_info", "dynamic.json")
        if os.path.isfile(json_file):
            print("dynamic exists")
            continue
        if not os.path.isdir(abs_path+"_info"):
            os.makedirs(abs_path+"_info")
        app_dynamic_result = {}
        time_cost = dynamic_analysis_one(abs_path, app_dynamic_result)

        app_dynamic_result['time_cost'] = time_cost

        save_json(app_dynamic_result, json_file)

        cnt += 1
        total_time += time_cost

        #break
    print("dynamic finish: ", time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
    print("average time_cost: ", total_time*1.0/cnt)



def dynamic_analysis_flow(root):
    total_time = 0
    cnt = 0
    print("dynamic start: ", time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
    for app in yield_app_paths(root):
        abs_path = os.path.join(root, app)
        json_file = os.path.join(abs_path + "_info", "dynamic_flow.json")
        if os.path.isfile(json_file):
            print("dynamic flow exists")
            continue

        try:
            time_cost, app_dynamic_result = dynamic_analysis_one_flow(abs_path)

            #app_dynamic_result['time_cost'] = time_cost

            save_json(app_dynamic_result, json_file)


            cnt += 1
            total_time += time_cost
        except Exception as e:
            import traceback
            traceback.print_exc()
            print('[dynamic_analysis] path: ', abs_path, "Exception: ", e)
        #break
    print("dynamic finish: ", time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
    print("average time_cost: ", total_time*1.0/cnt)


if __name__ == '__main__':
    test_path = r'M:\Android_Samples\android_malware\Android_malware\drebin-data\drebin-0\4f77e4612dd548f6f60eb4db80393e1e019d6c2e593b92ac1829d928739217b4'
    # result = {}
    # dynamic_analysis_one(test_path, result)
    # print(json.dumps(result))
    # result = []
    # dynamic_analysis_flow(test_path, result)

    root = input("apk root: ")
    # dynamic_analysis(root)    
    dynamic_analysis_flow(root)