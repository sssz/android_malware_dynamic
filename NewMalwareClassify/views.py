# -*- coding: utf_8 -*-

import json
import os
import re
import shutil
import traceback

from django.conf import settings
from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import render

from MobSF.utils import PrintException

from NewMalwareClassify.android_malware import is_malware_auto_dynamic


def returnTestResult(request):
    context = {}
    template = "malware_analysis/malware_analysis.html"
    return render(request, template, context)

def android_new_malware_classify(request):
    """Android Malware Classify View"""
    print("\n[INFO] New Malware Classify Started")
    try:
        if request.method == 'POST':
            md5_hash = request.POST['md5']
            package = request.POST['pkg']
            launcher = request.POST['lng']
            print(md5_hash)
            print(package)
            print(launcher)
            #3b0ae630d76887e48557fff3549640b2
            #com.kuxuexi.math.high
            #com.kuxuexi.base.core.ui.SplashActivity
            return returnTestResult(request)

            if re.findall(r';|\$\(|\|\||&&', package) or re.findall(r';|\$\(|\|\||&&', launcher):
                print("[ATTACK] Possible RCE")
                return HttpResponseRedirect('/error/')
            if re.match('^[0-9a-f]{32}$', md5_hash):
                # Delete ScreenCast Cache
                screen_file = os.path.join(settings.SCREEN_DIR, 'screen.png')
                if os.path.exists(screen_file):
                    os.remove(screen_file)
                # Delete Contents of Screenshot Dir
                screen_dir = os.path.join(
                    settings.UPLD_DIR, md5_hash + '/screenshots-apk/')
                if os.path.isdir(screen_dir):
                    shutil.rmtree(screen_dir)
                else:
                    os.makedirs(screen_dir)
                context = {}

                app_dir = os.path.join(
                    settings.UPLD_DIR, md5_hash + '/')  # APP DIRECTORY
                malware_classify_result = os.path.join(app_dir, 'malware_classify_result.json')
                if os.path.exists(malware_classify_result):
                    with open(malware_classify_result) as file:
                        data = json.load(file)
                    if data['is_malware'] == 1:
                        context['is_malware'] = True
                    else:
                        context['is_malware'] = False
                else:
                    if is_malware_auto_dynamic(md5_hash, package, launcher):
                        context['is_malware'] = True
                    else:
                        context['is_malware'] = False
                template = "malware_analysis/malware_analysis.html"
                return render(request, template, context)
            else:
                return HttpResponseRedirect('/error/')
        else:
            return HttpResponseRedirect('/error/')
    except:
        traceback.print_exc()
        PrintException("[ERROR] MalwareClassify")
        return HttpResponseRedirect('/error/')

def report(request):
    """Dynamic Analysis Report Generation"""
    print("\n[INFO] Malware Analysis Report Generation")
    try:
        if request.method == 'GET':
            md5_hash = request.GET['md5']
            package = request.GET['pkg']
            if re.findall(r";|\$\(|\|\||&&", package):
                print("[ATTACK] Possible RCE")
                return HttpResponseRedirect('/error/')
            if re.match('^[0-9a-f]{32}$', md5_hash):
                app_dir = os.path.join(
                    settings.UPLD_DIR, md5_hash + '/')  # APP DIRECTORY
                malware_classify_result = os.path.join(app_dir, 'malware_classify_result.json')
                with open(malware_classify_result) as file:
                    data = json.load(file)
                context = {}
                if data['is_malware'] == 1:
                    context['is_malware'] = True
                else:
                    context['is_malware'] = False
                template = "malware_analysis/malware_analysis.html"
                return render(request, template, context)
            else:
                return HttpResponseRedirect('/error/')
        else:
            return HttpResponseRedirect('/error/')
    except:
        PrintException("[ERROR] Dynamic Analysis Report Generation")
        return HttpResponseRedirect('/error/')
