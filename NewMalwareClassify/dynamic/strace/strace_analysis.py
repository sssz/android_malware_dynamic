# -*- coding: utf8 -*-

import os


#linux 3.4.0 qume i686


global systemcall_name_2_num
systemcall_name_2_num = None

def parse_syscall_define(file_name = None):
	global systemcall_name_2_num
	if(systemcall_name_2_num is not None):
		return
	if(file_name is None):
		file_name = os.path.join(os.path.dirname(__file__), "unistd.h")
	
	systemcall_name_2_num = {}
	with open(file_name, 'rb') as syscall:
		for line in syscall:
			line = str(line, encoding = "utf-8")
			if(not line.startswith("#")):
				continue
			items = line.strip().split()
			#print(items)
			syscall_name = items[1][5:]
			if(len(items) == 3):
				syscall_num = items[2][19:-1]
			else:
				syscall_num = items[3][0:-1]
			systemcall_name_2_num[syscall_name] = syscall_num


def strace_line_analysis(strace_line):
	line = str(strace_line.strip())
	items = line.split()
	systemcall_name = items[2].split("(")[0]
	global systemcall_name_2_num
	#print("%s <== %s"%(systemcall_name, systemcall_name_2_num.get(systemcall_name, len(systemcall_name_2_num))))
	if systemcall_name not in systemcall_name_2_num:
		return -1
	return systemcall_name_2_num.get(systemcall_name, len(systemcall_name_2_num))


def strace_analysis(file_path, parsed_file_path):
	if not os.path.exists(file_path):
		return
	global systemcall_name_2_num
	if(systemcall_name_2_num is None):
		parse_syscall_define()
	systemcall_count = 0
	with open(parsed_file_path, 'w') as fout:
		with open(file_path, 'rb') as f:
			for line in f.readlines():
				sysnum = strace_line_analysis(line)
				if(sysnum != -1):
					fout.write(str(sysnum)+"\n")
					systemcall_count += 1
				#print("line%s: %s"%(lineCnt, strace_line_analysis(line)))

	return systemcall_count


if __name__ == '__main__':
	#parse_syscall_define()
	strace_analysis('systemcall.txt', 'parsed_systemcall.txt')
	