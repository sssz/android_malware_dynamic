# -*- coding: utf8 -*-

import subprocess
import shutil
import threading
import time
import os


def getPidByPackage(adb, package):
    params = [adb, "-s", get_identifier(), "shell", "ps", "|grep", package]
    findPid = None
    retry = 0
    while retry < 3 and findPid is None:
        retry = retry + 1
        pid_result = str(subprocess.check_output(params), encoding = "utf-8")
        pid_result = pid_result.split("\n")
        for ps_item in pid_result:
            ps_item = ps_item.strip().split()
            #['u0_a19', '2396', '295', '580112', '51832', 'ffffffff', '94cca347', 'R', 'com.kuxuexi.math.high']
            if(len(ps_item) < 5):
                continue
            pid = ps_item[1]
            packagename = ps_item[-1]
            if(packagename == package):
                findPid = pid
                break
        if(findPid is None):
            time.sleep(1)
    if findPid is not None:
        print("package: %s ==> pid: %s"%(package, findPid))
        return findPid
    raise Exception("pid not found by packageName: %s", package)

def download_logs_thread(adb, download_dir, package):
    #change to strace the pid
    '''
        step1: get pid by ps  | grep packageName
        step2: strace, result store on vm 
            adb shell strace -T -tt -e trace=all -f -F -o /data/local/tmp/strace -p 2395
        step3: pull to pc
    '''
    if not os.path.isdir(download_dir):
        os.makedirs(download_dir)

    #step 1
    pid = getPidByPackage(adb, package)

    #step 2
    params = [adb, "-s", get_identifier(), "shell",\
        "strace", "-T", "-tt", "-e", "trace=all", "-f", "-F", "-o", "/data/local/tmp/strace",\
        "-p", pid]
    strace = subprocess.Popen(params)    
    t_start = time.time()
    print("strace start: %s"%time.asctime(time.localtime(time.time())))
    try:
        # strace for 60 seconds
        _, _ = strace.communicate(timeout=100)
    except subprocess.TimeoutExpired:
        strace.kill()
    end_time = time.asctime( time.localtime(time.time()))
    print("strace end at: %s"%end_time)

    #step3
    strace_file = os.path.join(download_dir, 'systemcall.txt')
    subprocess.call([adb,
                     "-s",
                     get_identifier(),
                     "pull",
                     "/data/local/tmp/strace",
                     strace_file])
    return

def start_strace(adb, download_dir, package):
    # 开启下载 log 线程
    global Is_Downloading
    Is_Downloading = True
    t = threading.Thread(target=download_logs_thread, args=(adb, download_dir, package))
    t.start()
    return t


