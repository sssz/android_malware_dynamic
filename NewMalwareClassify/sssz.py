import os


from static_main import static_analysis_one
from dynamic_main import dynamic_analysis_one
from utils import save_json
from model.data_loader import vectorization_one
from model.fm import predict_malware

def static(apk_path):
    static_result = {}
    time_cost = static_analysis_one(apk_path, static_result)
    result_file = os.path.join(apk_path+"_info", "static.json")
    save_json(static_result, result_file)
    print("static finish. time cost: ", time_cost)

def dynamic(apk_path):
    dynamic_result = {}
    try:
        time_cost = dynamic_analysis_one(apk_path, dynamic_result)
    except Exception as e:
        time_cost = -1
        print("dynamic", e) #TODO 自动化测试，生成x_logcat.txt
    result_file = os.path.join(apk_path+"_info", "dynamic.json")
    save_json(dynamic_result, result_file)
    print("dynamic finish. time cost: ", time_cost)


def main():

    apk_path = r"M:\android_malware_dynamic\NewMalwareClassify\sample_benign.apk"
    apk_path = r"M:\android_malware_dynamic\NewMalwareClassify\sample_malware.apk"
    
    def gen_feature(apk_path):
        static(apk_path)
        dynamic(apk_path)  

    def predict(apk_path):
        x_static, x_dynamic, x_hybrid = vectorization_one(apk_path)
        import numpy as np
        return predict_malware(x_static, x_dynamic, x_hybrid)

    gen_feature(apk_path)
    score =  predict(apk_path)
    return score

if __name__ == '__main__':
    main()