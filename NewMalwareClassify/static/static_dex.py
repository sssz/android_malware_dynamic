#encoding='UTF-8'
#从dex文件中提取特征

from androguard.core.bytecodes import apk, dvm
from androguard.core.analysis import analysis
import re
import os
import json
import sys
#sys.path.append("..\\..\\")
#from NewMalwareClassify.utils import yield_app_paths
#from NewMalwareClassify.static.extractor.string_extractor import extractString
#from NewMalwareClassify.static.extractor.api_extractor import (extractAPI, extractDistinctAPI)
from extractor.api_extractor import (extractAPI, extractDistinctAPI)
from extractor.string_extractor import extractString
from tools.LiteRadar.literadar import LibRadarLite

def match_libs(method_class_name, libs):
    for lib in libs:
        if method_class_name.startswith(lib):
            return True
    return False

def yield_instructions(app, app_dex, app_x, libs):
    try:
        match_classes = {}

        for method in app_dex.get_methods():
            e_method = app_x.get_method(method)
            if method.get_code() == None:
                continue
            #print(type(e_method))
            #e_method.show()
            #if("example" in method.get_class_name()):
            #    print(method.get_class_name())
            method_class_name = method.get_class_name()
            if method_class_name not in match_classes:
                match_classes[method_class_name] = match_libs(method_class_name, libs)
            if not match_classes[method_class_name]:
                #print(method_class_name)
                #e_method.show()
                for i in e_method.get_basic_blocks().get():
                #print(type(i)) code blocks
                    for ins in i.get_instructions():
                        yield ins
    except Exception as e:
        print("[yield_instructions], Exceptions: ", e)


def analysis_one_app_dex(app, app_dex, app_x, libs, ins_extractor):
    try:  
        import time
        print(time.time())

        ins_extractor.start_app(app, app_dex, app_x)

        for ins in yield_instructions(app, app_dex, app_x, libs):
            ins_extractor.process_instruction(ins)

        ins_extractor.finish_app(app, app_dex, app_x)

        print(time.time())

    except Exception as e:
        print('[gen_one_app] Exception: ', e)


#计数api在app中的出现次数，一个api在一个app中出现多次，累加多次
def gen_apis(app, app_dex, app_x):
    extractor = extractAPI()

    #for app_abs_path in yield_app_paths(root):
    analysis_one_app_dex(app, app_dex, app_x, extractor)

    if 'benign' in root:
        dump_name = "benign_api.json"
    else:
        dump_name = "malware_api.json"

    api_dict = extractor.get_result()
    with open(dump_name, 'w') as f:
        json.dump(api_dict, f)


#计数api在app中的出现次数，一个api在一个app中出现多次，只累计1次
def gen_apis_one_cnt(app, app_dex, app_x, libs):
    extractor = extractDistinctAPI()

    #for app_abs_path in yield_app_paths(root):
    analysis_one_app_dex(app, app_dex, app_x, libs, extractor)

    return extractor.get_result()

    #if 'benign' in root:
    #    dump_name = "benign_api_one_cnt.json"
    #else:
    #    dump_name = "malware_api_one_cnt.json"

    #api_dict = extractor.get_result()

    #with open(dump_name, 'w') as f:
    #    json.dump(api_dict, f)


def gen_strings_from_dex(app, app_dex, app_x, libs):
    extractor = extractString()

    #for app_abs_path in yield_app_paths(root):
    analysis_one_app_dex(app, app_dex, app_x, libs, extractor)

    return extractor.get_result()
    '''
    if 'benign' in root:
        dump_name = "benign_api_one_cnt.json"
    else:
        dump_name = "malware_api_one_cnt.json"
    api_dict = extractor.get_result()
    with open(dump_name, 'w') as f:
        json.dump(api_dict, f)
    '''

def get_libs_from_dex(file_path):
    lrd = LibRadarLite(file_path)
    res = lrd.compare()
    libs = [item['Package'] for item in res]
    return libs
    #import json
    #print(json.dumps(res))

def static_dex2(app, result):
    libs = get_libs_from_dex(app.get_filename())

    app_dex = dvm.DalvikVMFormat(app.get_dex())
    app_x = analysis.Analysis(app_dex)

    apis = gen_apis_one_cnt(app, app_dex, app_x, libs)
    #print(len(apis))
    method_strings = gen_strings_from_dex(app, app_dex, app_x, libs)

    result['dex'] = {
        #"apis": apis,
        "strings": method_strings,
        "libs": libs
    }
    #print(len(strings))
    #print(strings)

def test(file_path):
    try:
        app = apk.APK(file_path)
        app_dex = dvm.DalvikVMFormat(app.get_dex())
        app_x = analysis.Analysis(app_dex)
        app.show()
    except Exception as e:
        print(e)



if __name__ == "__main__":
    '''
    从apk文件中静态抽取api，并按照两种计数规则计数
    benign: 360shoujizhushou  2900个
        M:\Android_Samples\android_malware\Android_benign\360shoujizhushou\2017-12-03--2017-12-05
    malware: derbin0 1000个
        M:\Android_Samples\android_malware\Android_malware\drebin-data\drebin-0
    '''
    #root = input("root path:")
    #gen_apis(root)
    #gen_apis_one_cnt(root)
    #merge_derbin_malware()
    file  = "M:\\Android_Samples\\android_malware\\Android_malware\\drebin-data\\drebin-0\\1f035efeca8e72c61e2b48bc475d37988b08803e538b511b2c109937e02c9ee0"
    test(file)