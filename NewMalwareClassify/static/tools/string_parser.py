import re
import os
import json



class string_parser():
    def __init__(self):
        self.load_config()

    def load_config(self):
        #permission
        config_root = os.path.join(os.path.dirname(os.path.dirname(__file__)), "static_config")

        permison_file = os.path.join(config_root, "permissions.json")
        with open(permison_file, "r") as f:
            self.permission_list = json.load(f)
        print("number of permissions:", len(self.permission_list['values']))
        
        use_feature_file = os.path.join(config_root, "used_features.json")
        with open(use_feature_file, "r") as f:
            self.use_feature_list = json.load(f)
        print("number of used_features:", len(self.use_feature_list['used_features']))
        
        #shell command
        shell_command_file = os.path.join(config_root, "system_command.txt")
        self.command_list = []
        with open(shell_command_file, "r") as f:
            for line in f:
                self.command_list.append(line.strip())
        print("number of commands:", len(self.command_list))
        
        #system intent action
        intent_action_file = os.path.join(config_root, "intent_actions.json")
        with open(intent_action_file, "r") as f:
            self.intent_action_list = json.load(f)
        print("number of intent actions:", len(self.intent_action_list['actions']))

        #content url
        content_url_file = os.path.join(config_root, "content_url.txt")
        self.content_url_list = []
        with open(content_url_file, "r") as f:
            for line in f:
                self.content_url_list.append(line.strip())
        print("number of content urls:", len(self.content_url_list))
        
        #file system path
        path_file = os.path.join(config_root, "file_path.txt")
        self.path_list = []
        with open(path_file, "r") as f:
            for line in f:
                if len(line.strip()) > 0:
                    self.path_list.append(line.strip())
        print("number of file paths:", len(self.path_list))


    def parse_url(self, string):
        url_pattern = r'(ht|f)tp(s?)\:\/\/([0-9a-zA-Z])([-.\w]*[0-9a-zA-Z])*(:(0-9)*)*(\/?)([a-zA-Z0-9\-\.\?\,\'\/\\\+&amp;%\$#_]*)?'
        try:
            match = re.search(url_pattern, string)
            if match:
                #host_name = string[string.index("://")+3 + string.index()]
                #print(match.group(3)+match.group(4))
                host_name = match.group(3) + match.group(4)
                return string, host_name
        except Exception as e:
            pass
        return None, None

    def parse_permission(self, string):
        if string in self.permission_list['values']:
            return string
        return None

    def parse_hardware(self, string):
        if string in self.use_feature_list['used_features']:
            return string
        return None

    def parse_command(self, string):
        command = string.split(' ')[0]
        if command in self.command_list:
            return command
        return None

    def parse_intent_action(self, string):
        if string in self.intent_action_list['actions']:
            return string
        return None

    def parse_content_url(self, string):
        if string.endswith("/"):
            string = string[:-1]
        if string in self.content_url_list:
            return string
        return None

    def parse_file_path(self, string):
        for root_path in self.path_list:
            if string.startswith(root_path):
                return string
        return None

    def parse_strings(self, strings):
        urls = []
        hosts = {}
        permissions = []
        commands = {}
        intent_actions = {}
        content_urls = {}
        paths = []

        for string in strings:
            if string.startswith("http") or string.startswith("https") or string.startswith("ftp"):
                tmp1, tmp2 = self.parse_url(string)
                if tmp1 and tmp2:
                    urls.append(tmp1)
                    hosts[tmp2] = hosts.get(tmp2, 0) + 1
            elif string.startswith("android.permission") or string.startswith("com.android"):
                permission = self.parse_permission(string)
                if permission:
                    permissions.append(permission)
            elif string.startswith("android.intent.action"):
                action = self.parse_intent_action(string)
                if action:
                    intent_actions[action] = intent_actions.get(action, 0) + 1
            elif string.startswith("content://"):
                url = self.parse_content_url(string)
                if url:
                    content_urls[url] = content_urls.get(url, 0) + 1 
            elif string.startswith("/") and len(string) >= 2 and (string[1] >= "a" and string[1] <= 'z'):
                p = self.parse_file_path(string)
                if p:
                    paths.append(p)
            elif len(string) >= 2 and (string[0] >= "a" and string[0] <= 'z') and (string[1] >= "a" and string[1] <= 'z'):
                #some bad case like "sync data file 0 failed"
                #static DVM Engine to fix it
                command = self.parse_command(string)
                if command:
                    commands[command] = commands.get(command, 0) + 1

            # elif TODO sql content provider,file

        result = {}
        result['urls'] = urls
        result['hosts'] = hosts
        result['permission'] = permissions
        result['command'] = commands
        result['intent_action'] = intent_actions
        result['content_url'] = content_urls
        result['path'] = paths

        return result

STRING_PARSER = string_parser()
