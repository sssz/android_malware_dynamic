#encoding='UTF-8'

from androguard.core.bytecodes import apk, dvm
from androguard.core.analysis import analysis
import re
import os
import json
from extractor.base_extractor import baseInsExtractor



class extractAPI(baseInsExtractor):
    def start_app(self, app, app_dex, app_x):
        super().start_app(app, app_dex, app_x)
        self.classes = [cc.get_name() for cc in app_dex.get_classes()]

    def process_instruction(self, ins):
        output= ins.get_output() #invoke methods
        #L{class_name};->{method_name}({params}){returnType}
        match = re.search(r'(L[^;]*;)->([^\(]*)\(([^\)]*)\)(.*)', output)
        if match and match.group(1) not in self.classes:
            total = match.group(0)
            class_name = match.group(1)
            method_name = match.group(2)
            params = match.group(3)
            returnV = match.group(4)
            if total not in self.result:
                self.result[total] = 1
            else:
                self.result[total] += 1

class extractDistinctAPI(extractAPI):
    def start_app(self, app, app_dex, app_x):
        super().start_app(app, app_dex, app_x)
        self.cur_result = {}

    def process_instruction(self, ins):
        output= ins.get_output() #invoke methods
        #L{class_name};->{method_name}({params}){returnType}
        match = re.search(r'(L[^;]*;)->([^\(]*)\(([^\)]*)\)(.*)', output)
        if match and match.group(1) not in self.classes:
            total = match.group(0)
            class_name = match.group(1)
            method_name = match.group(2)
            params = match.group(3)
            returnV = match.group(4)
            if total not in self.cur_result:
                self.cur_result[total] = 1
    
    def finish_app(self, app, app_dex, app_x):
        self.merge_result()

    def merge_result(self):
        for k in self.cur_result:
            if k not in self.result:
                self.result[k] = 1
            else:
                self.result[k] += 1