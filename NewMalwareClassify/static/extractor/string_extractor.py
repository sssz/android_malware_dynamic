#encoding='UTF-8'

from androguard.core.bytecodes import apk, dvm
from androguard.core.analysis import analysis
import re
import os
import json
from extractor.base_extractor import baseInsExtractor
#from base_extractor import baseInsExtractor

class extractString(baseInsExtractor):
    def process_instruction(self, ins):
        try:
            if ins.get_name() == "const-string":
                value = ins.get_operands()[-1][-1][1:-1]
                if value not in self.result:
                    self.result[value] = 1
                else:
                    self.result[value] += 1
        except Exception as e:
            pass

    def parse_url(self, string):
        url_pattern = r'(ht|f)tp(s?)\:\/\/([0-9a-zA-Z])([-.\w]*[0-9a-zA-Z])*(:(0-9)*)*(\/?)([a-zA-Z0-9\-\.\?\,\'\/\\\+&amp;%\$#_]*)?'
        match = re.search(url_pattern, string)
        if match:
            #host_name = string[string.index("://")+3 + string.index()]
            #print(match.group(3)+match.group(4))
            host_name = match.group(3) + match.group(4)
            return string, host_name
        return None, None

    def load_permission(self):
        permison_file = os.path.join(os.path.join(os.path.dirname(os.path.dirname(__file__)), "permission"), "permissions.json")
        with open(permison_file, "r") as f:
            permission_list = json.load(f)
        return permission_list

    def parse_permission(self, string, permission_list):
        if string in permission_list['values']:
            return string
        return None

    def finish_app(self, app, app_dex, app_x):
        print("finish")
        urls = []
        hosts = []
        permissions = []
        permission_list = self.load_permission()
        print(len(permission_list['values']))

        #url_pattern =  r'(ht|f)tp(s?)\:\/\/[0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*(:(0-9)*)*'
        for string in self.result:
            if string.startswith("http") or string.startswith("https") or string.startswith("ftp"):
                tmp1, tmp2 = self.parse_url(string)
                if tmp1 and tmp2:
                    urls.append(tmp1)
                    hosts.append(tmp2)                
            elif string.startswith("android.permission") or string.startswith("com.android"):
                print(string)
                permission = self.parse_permission(string, permission_list)
                if permission:
                    permissions.append(permission)
            # sql content provider
            # file
            # elif TODO intent filter action/category


        self.result = {}
        self.result['urls'] = urls
        self.result['hosts'] = hosts
        self.result['permission'] = permissions



        print(self.result)

if __name__ == "__main__":
    pass