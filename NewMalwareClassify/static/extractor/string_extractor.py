#encoding='UTF-8'

from androguard.core.bytecodes import apk, dvm
from androguard.core.analysis import analysis
import re
import os
import json
from extractor.base_extractor import baseInsExtractor
#from base_extractor import baseInsExtractor

class extractString(baseInsExtractor):
    def process_instruction(self, ins):
        try:
            if ins.get_name() == "const-string":
                value = ins.get_operands()[-1][-1][1:-1]
                if value not in self.result:
                    self.result[value] = 1
                else:
                    self.result[value] += 1
        except Exception as e:
            pass

    def parse_url(self, string):
        url_pattern = r'(ht|f)tp(s?)\:\/\/([0-9a-zA-Z])([-.\w]*[0-9a-zA-Z])*(:(0-9)*)*(\/?)([a-zA-Z0-9\-\.\?\,\'\/\\\+&amp;%\$#_]*)?'
        match = re.search(url_pattern, string)
        if match:
            #host_name = string[string.index("://")+3 + string.index()]
            #print(match.group(3)+match.group(4))
            host_name = match.group(3) + match.group(4)
            return string, host_name
        return None, None

    def load_config(self):
        #permission
        permison_file = os.path.join(os.path.join(os.path.dirname(os.path.dirname(__file__)), "static_config"), "permissions.json")
        with open(permison_file, "r") as f:
            self.permission_list = json.load(f)
        print("number of permissions:", len(self.permission_list['values']))
        #shell command
        shell_command_file = os.path.join(os.path.join(os.path.dirname(os.path.dirname(__file__)), "static_config"), "system_command.txt")
        self.command_list = []
        with open(shell_command_file, "r") as f:
            for line in f:
                self.command_list.append(line.strip())
        print("number of commands:", len(self.command_list))
        
        #system intent action
        intent_action_file = os.path.join(os.path.join(os.path.dirname(os.path.dirname(__file__)), "static_config"), "intent_actions.json")
        with open(intent_action_file, "r") as f:
            self.intent_action_list = json.load(f)
        print("number of intent actions:", len(self.intent_action_list['actions']))


    def parse_permission(self, string):
        if string in self.permission_list['values']:
            return string
        return None

    def parse_command(self, string):
        command = string.split(' ')[0]
        if command in self.command_list:
            return command
        return None

    def parse_intent_action(self, string):
        if string in self.intent_action_list['actions']:
            return string
        return None

    def finish_app(self, app, app_dex, app_x):
        print("finish")
        self.load_config()
        
        urls = []
        hosts = {}
        permissions = []
        commands = {}
        intent_actions = {}

        #url_pattern =  r'(ht|f)tp(s?)\:\/\/[0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*(:(0-9)*)*'
        for string in self.result:
            if string.startswith("http") or string.startswith("https") or string.startswith("ftp"):
                tmp1, tmp2 = self.parse_url(string)
                if tmp1 and tmp2:
                    urls.append(tmp1)
                    hosts[tmp2] = hosts.get(tmp2, 0) + 1
            elif string.startswith("android.permission") or string.startswith("com.android"):
                permission = self.parse_permission(string)
                if permission:
                    permissions.append(permission)
            elif len(string) >= 2 and (string[0] >= "a" and string[0] <= 'z') and (string[1] >= "a" and string[1] <= 'z'):
                #some bad case like "sync data file 0 failed"
                #static DVM Engine to fix it
                command = self.parse_command(string)
                if command:
                    commands[command] = commands.get(command, 0) + 1
            elif string.startswith("android.intent.action"):
                print(string)
                action = self.parse_intent_action(string)
                if action:
                    intent_actions[action] = intent_actions.get(action, 0) + 1

            # elif TODO sql content provider,file

        self.result = {}
        self.result['urls'] = urls
        self.result['hosts'] = hosts
        self.result['permission'] = permissions
        self.result['command'] = commands
        self.result['intent_action'] = intent_actions

if __name__ == "__main__":
    pass