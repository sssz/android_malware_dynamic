import re
import os
import json
import csv

class pscout_parser():
    def __init__(self):
        self.load_config()

    def load_config(self):
        #permission
        config_root = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "config")
        mapping_file = os.path.join(config_root, "mapping_4.4.4.csv")
        self.mapping = {}
        with open(mapping_file, "r") as f:
            data = csv.reader(f)
            for idx, item in enumerate(data):
                if idx == 0:
                    continue
                #print(item)
                #['com/android/server/LocationManagerService', 'getBestProvider', '(Landroid/location/Criteria;Z)Ljava/lang/String;', 'android.permission.ACCESS_COARSE_LOCATION', '4.4.4']
                class_name = self.get_classname(item[0])
                method = item[1]
                key = self.get_key(class_name, method)
                self.mapping.setdefault(key, []).append(item[3])
        print("number of mappings:", len(self.mapping))

    def get_classname(self, class_sign):
        classname = re.sub(r"^L", "", class_sign.replace("/", ".").replace(";", ""))
        return classname

    def get_key(self, class_name, method):
        return class_name + "->" + method

    def parse_apis(self, app_apis):
        result = set()
        for (api_sign, api) in app_apis.items():
            class_name = self.get_classname(api['class_name'])
            key = self.get_key(class_name, api['method'])
            
            if key in self.mapping:
                result.update(self.mapping[key])
            
        return list(result)

PSCOUT_PARSER = pscout_parser()    
def test():
    apis = list(PSCOUT_PARSER.mapping.keys())
    perms = set()
    for v in PSCOUT_PARSER.mapping.values():
        perms.update(v)
    print(len(apis))
    print(len(perms))

if __name__ == '__main__':
    test()