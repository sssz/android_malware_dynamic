#encoding='UTF-8'
#总的入口

import time
import os


from androguard.core.bytecodes import apk, dvm
from androguard.core.analysis import analysis

from utils import (yield_app_paths, save_json)
from static.static_manifest import static_manifest
from static.static_resource import static_resource
from static.static_dex import static_dex2


def static_analysis_one(file_path, result):
    start_time = time.time()

    app = apk.APK(file_path)

    '''
        Done
            manifest: 
                permission, used-features, intent_filter
            dex:
                API
                String:
                    url(host), permission, shell command
                    intent_filter(action), content_url, file_path
        TODO:
            manifest:
                others
            resource:
                Strings
            dex:
                multidex
                static DVM Engine
    '''

    static_manifest(app, result)

    static_resource(app, result)
    
    static_dex2(app, result)

    time_cost = time.time() - start_time
    return time_cost


def static_analysis(root):
    total_time = 0
    cnt = 0
    print("static start: ", time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
    for app in yield_app_paths(root):
        abs_path = os.path.join(root, app)
        json_file = os.path.join(abs_path + "_info", "static.json")
        if os.path.isfile(json_file):
            print("static exists")
            continue

        app_static_result = {}
        time_cost = static_analysis_one(abs_path, app_static_result)

        app_static_result['time_cost'] = time_cost

        save_json(app_static_result, json_file)

        cnt += 1
        total_time += time_cost

        break
    print("static finish: ", time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))
    print("average time_cost: ", total_time*1.0/cnt)





if __name__ == "__main__":
    #file_path = "ff882679aac722d8f9ae493631e0d135b0aa281e.apk"
    #file_path = "app-debug.apk"
    #file_path = "static/benign_ff3efaadb50ed6607a664da79ffebb09e591d563.apk"
    #result = {}
    #print(static_analysis(file_path, result))
    #import json
    #print(json.dumps(result))
    root = input("apk root: ")
    static_analysis(root)
