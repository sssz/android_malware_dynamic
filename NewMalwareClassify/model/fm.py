import tensorflow as tf
import numpy as np
from tensorflow.keras.initializers import glorot_uniform
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, make_scorer
K = tf.keras.backend

import keras
from keras.wrappers import scikit_learn

from data_loader import (vectorization_main, vectorization_andmal2017, vectorization_mix, vectorization_hybrid)
from metrics import precision, recall, f1_score as f1
from utils import (save_json)

class MyLayer(tf.keras.layers.Layer):
    def __init__(self, input_dim, k=30, **kwargs):
        self.input_dim = input_dim
        self.k = k
        super(MyLayer, self).__init__(**kwargs)
    def build(self, input_shape):
        self.kernel = self.add_weight(name='kernel', 
                                      shape=(self.input_dim, self.k),
                                      initializer='glorot_uniform',
                                      trainable=True)
        super(MyLayer, self).build(input_shape)

    def call(self, x):
        a = K.pow(K.dot(x,self.kernel), 2)
        b = K.dot(K.pow(x, 2), K.pow(self.kernel, 2))
        return 0.5 * K.sum(a-b, 1, keepdims=True)

    def compute_output_shape(self, input_shape):
        return (input_shape[0], self.k)

    def get_config(self):
        config = super().get_config()
        config['input_dim'] = self.input_dim
        config['k'] = self.k
        return config

def FM(k=30):

    feature_dim = 808
    inputs = tf.keras.Input((feature_dim,))
    liner = tf.keras.layers.Dense(units=1, 
                                  bias_regularizer=tf.keras.regularizers.l2(0.01),
                                  kernel_regularizer=tf.keras.regularizers.l1(0.02),
                                  )(inputs)
    cross = MyLayer(feature_dim, k)(inputs)
    add = tf.keras.layers.Add()([liner, cross])
    predictions = tf.keras.layers.Activation('sigmoid')(add)
    model = tf.keras.Model(inputs=inputs, outputs=predictions)
    model.compile(loss='binary_crossentropy',
                  optimizer=tf.train.AdamOptimizer(0.001),
                  metrics=['accuracy', 'binary_accuracy', precision, recall, f1])
    model.summary()
    return model

def train():
    fm = FM(30)
    #X_train, X_test, y_train, y_test = vectorization_main()
    #X_train, X_test, y_train, y_test = vectorization_main(data_name = "derbin_0", feature_name = "dynamic.json")
    X_train, X_test, y_train, y_test = vectorization_hybrid()
    #X_train, X_test, y_train, y_test = vectorization_andmal2017()
    #X_train, X_test, y_train, y_test = vectorization_mix()

    print(X_train.shape)
    fm.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))
    y_pred = fm.predict(X_test)
    y_pred = np.array([1 if y[0] >= 0.5 else 0 for y in y_pred])
    fm.save("trained_models\\hybrid_fm.h5")
    return accuracy_score(y_test, y_pred), precision_score(y_test, y_pred), recall_score(y_test, y_pred), f1_score(y_test, y_pred)

def search_param():

    model = scikit_learn.KerasClassifier(build_fn=FM, epochs=50, batch_size=32, verbose=0)
    k = range(10, 200, 10)
    param_grid = dict(k=k)
    grid = GridSearchCV(estimator=model, param_grid=param_grid, n_jobs=2)#, scoring = make_scorer(f1_score, greater_is_better = False))
    X_train, X_test, y_train, y_test = vectorization_main()
    grid_result = grid.fit(X_train, y_train)
    print('Best: {} using {}'.format(grid_result.best_score_, grid_result.best_params_))

    means = grid_result.cv_results_['mean_test_score']
    stds = grid_result.cv_results_['std_test_score']
    params = grid_result.cv_results_['params']


    for mean, std, param in zip(means, stds, params):
        print("%f (%f) with: %r" % (mean, std, param))

def evaluate():
    result = []
    try_cnt = 30
    for i in range(try_cnt):
        result.append(train())
    acc = sum([result[i][0] for i in range(try_cnt)])/try_cnt
    pre = sum([result[i][1] for i in range(try_cnt)])/try_cnt
    rec = sum([result[i][2] for i in range(try_cnt)])/try_cnt
    f1 = sum([result[i][3] for i in range(try_cnt)])/try_cnt
    print(acc, pre, rec, f1)


def predict():
    def calc_effective(fm, X, Y):    
        pred_y = fm.predict(np.array(X))
        y = [1 if y >= 0.5 else 0 for y in pred_y]
        tp = []
        fp = []
        tn = []
        fn = []
        for idx in range(len(paths)):
            if y[idx] == 1 and Y[idx] == 1:
                tp.append(paths[idx])
            if y[idx] == 1 and Y[idx] == 0:
                fp.append(paths[idx])
                print(paths[idx], pred_y[idx])
            if y[idx] == 0 and Y[idx] == 1:
                fn.append(paths[idx])
                print(paths[idx], pred_y[idx])
            if y[idx] == 0 and Y[idx] == 0:
                tn.append(paths[idx])
        print("tp: ", len(tp), " fp: ", len(fp), " fn: ", len(fn), " tn: ", len(tn))
        print("acc: ", (len(tp) + len(tn)) / (len(paths)), "precision:", (len(tp)) / (len(tp) + len(fp)), "recall:", (len(tp)) / (len(tp) + len(fn)))
        return tp, fp, tn, fn
    paths, X, Y = vectorization_main(data_name = "derbin_0", feature_name = "static.json", test_all = True)
    static_fm = tf.keras.models.load_model("trained_models\\static_fm.h5", custom_objects={'glorot_uniform': glorot_uniform(), 'MyLayer': MyLayer(808)})
    tp, fp, tn, fn = calc_effective(static_fm, X, Y)
    #save_json({"tp": tp, "fp": fp, "tn": tn, "fn": fn}, "static_result")

    paths, X, Y = vectorization_main(data_name = "derbin_0", feature_name = "dynamic.json", test_all = True)    
    dynamic_fm = tf.keras.models.load_model("trained_models\\dynamic_fm.h5", custom_objects={'glorot_uniform': glorot_uniform(), 'MyLayer': MyLayer(808)})
    tp, fp, tn, fn = calc_effective(dynamic_fm, X, Y)
    #save_json({"tp": tp, "fp": fp, "tn": tn, "fn": fn}, "dynamic_result")

    paths, X, Y = vectorization_hybrid(data_name = "derbin_0", test_all = True)        
    hybrid_fm = tf.keras.models.load_model("trained_models\\hybrid_fm.h5", custom_objects={'glorot_uniform': glorot_uniform(), 'MyLayer': MyLayer(808)})
    tp, fp, tn, fn = calc_effective(hybrid_fm, X, Y)
    #save_json({"tp": tp, "fp": fp, "tn": tn, "fn": fn}, "hybrid_result")

"""
[data_set] positive:  982 negative:  2276
[train] total:  0  positive:  0 negative:  0
[test] total:  3258  positive:  982 negative:  2276
tp:  958  fp:  8  fn:  24  tn:  2268
acc:  0.9901780233271946 precision: 0.9917184265010351 recall: 0.9755600814663951

[data_set] positive:  968 negative:  2196
[train] total:  0  positive:  0 negative:  0
[test] total:  3164  positive:  968 negative:  2196
tp:  920  fp:  56  fn:  48  tn:  2140
acc:  0.9671302149178256 precision: 0.9426229508196722 recall: 0.9504132231404959

[data_set] positive:  982 negative:  2276
[train] total:  0  positive:  0 negative:  0
[test] total:  3258  positive:  982 negative:  2276
tp:  962  fp:  13  fn:  20  tn:  2263
acc:  0.9898710865561694 precision: 0.9866666666666667 recall: 0.9796334012219959
pred:
    1 if static == 1 and dynamic == 1
    0 if static == 0 and dynamic == 0
    else:
        grey
"""
if __name__ == '__main__':
    #train()
    predict()
    #evaluate()
    #search_param()