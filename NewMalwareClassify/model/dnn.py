import tensorflow as tf
K = tf.keras.backend
from data_loader import (vectorization_main, vectorization_andmal2017, vectorization_mix)

from keras.models import Sequential
from keras.layers import Dense
# from keras.wrappers.scikit_learn import KerasClassifier
# from sklearn.model_selection import cross_val_score
# from sklearn.preprocessing import LabelEncoder
# from sklearn.model_selection import StratifiedKFold

from metrics import precision, recall, f1_score as f1
import numpy as np
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

from tensorflow.examples.tutorials.mnist import input_data

def DNN(input_dim, output_dim):
    model = Sequential()
    model.add(Dense(units=30, input_shape=(input_dim,), activation='relu'))
    model.add(Dense(units=25, input_shape=(30,), activation='relu'))
    model.add(Dense(units=output_dim, input_shape=(25,), activation='sigmoid'))
    
    # Compile model
    #model.compile(loss='binary_crossentropy', optimizer=tf.train.AdamOptimizer(1), metrics=['binary_accuracy'])
    model.compile(optimizer = 'rmsprop',loss = 'binary_crossentropy',metrics= ['binary_accuracy', precision, recall, f1])
    model.summary()
    return model
    # evaluate model with standardized dataset
    #estimator = KerasClassifier(build_fn=create_baseline, epochs=100, batch_size=5, verbose=0)
    #kfold = StratifiedKFold(n_splits=10, shuffle=True)
    #results = cross_val_score(estimator, X, encoded_Y, cv=kfold)
    #print("Baseline: %.2f%% (%.2f%%)" % (results.mean()*100, results.std()*100))


def train():
    dnn = DNN(808, 1)
    #X_train, X_test, y_train, y_test = vectorization_main()
    X_train, X_test, y_train, y_test = vectorization_main(data_name = "derbin_0", feature_name = "dynamic.json")
    #X_train, X_test, y_train, y_test = vectorization_andmal2017()
    #X_train, X_test, y_train, y_test = vectorization_mix()
    print(X_train.shape, y_train.shape)
    dnn.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))
    y_pred = dnn.predict(X_test)
    y_pred = np.array([1 if y[0] > 0.5 else 0 for y in y_pred])

    return accuracy_score(y_test, y_pred), precision_score(y_test, y_pred), recall_score(y_test, y_pred), f1_score(y_test, y_pred)

def evaluate():
    result = []
    try_cnt = 30
    for i in range(try_cnt):
        result.append(train())
    acc = sum([result[i][0] for i in range(try_cnt)])/try_cnt
    pre = sum([result[i][1] for i in range(try_cnt)])/try_cnt
    rec = sum([result[i][2] for i in range(try_cnt)])/try_cnt
    f1 = sum([result[i][3] for i in range(try_cnt)])/try_cnt
    print(acc, pre, rec, f1)
    #0.9640422631220174 0.9388329089180775 0.9416478345079741 0.9400349661664494
    #0.964212678936605 0.933632112162519 0.9458280650798727 0.9395342348449509

if __name__ == '__main__':
    #print(train())
    evaluate()