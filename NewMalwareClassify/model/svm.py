from sklearn import svm
from data_loader import (vectorization_main, vectorization_andmal2017, vectorization_mix, vectorization_hybrid)
#from metrics import precision, recall, f1_score
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score


def train():
    #X_train, X_test, y_train, y_test = vectorization_main()
    #X_train, X_test, y_train, y_test = vectorization_main(data_name = "drebin", feature_name = "static.json")
    X_train, X_test, y_train, y_test = vectorization_hybrid(data_name = "drebin")
    #X_train, X_test, y_train, y_test = vectorization_andmal2017()
    #X_train, X_test, y_train, y_test = vectorization_mix()
    print(time.time())
    
    #classifier=svm.SVC(kernel = 'linear', decision_function_shape='ovo')
    classifier=svm.SVC(kernel='rbf', decision_function_shape='ovo')
    classifier.fit(X_train, y_train)
    print(time.time())
    #score = classifier.score(X_test, y_test)
    y_pred = classifier.predict(X_train)
    acc = accuracy_score(y_train, y_pred)
    precision = precision_score(y_train, y_pred)
    recall = recall_score(y_train, y_pred)
    f1 = f1_score(y_train, y_pred)
    print(acc, precision, recall, f1)    

    y_pred = classifier.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    print(acc, precision, recall, f1)
    return acc, precision, recall, f1

def evaluate():
    result = []
    try_cnt = 30
    for i in range(try_cnt):
        result.append(train())
    acc = sum([result[i][0] for i in range(try_cnt)])/try_cnt
    pre = sum([result[i][1] for i in range(try_cnt)])/try_cnt
    rec = sum([result[i][2] for i in range(try_cnt)])/try_cnt
    f1 = sum([result[i][3] for i in range(try_cnt)])/try_cnt
    print(acc, pre, rec, f1) 
    '''
    derbn0 vs benign
        0.9386843899113841 0.8918344238355598 0.909683549032539 0.9002710534363695
    andmal2017 vs benign
        0.8908975979772441 1.0 0.20902194050893483 0.3446623585572391
    linear svm: derbin
    static
        0.9474096796182689 0.9068187707448787 0.9215816070911613 0.9138744652776628
[data_set] positive:  5473 negative:  5859
[train] total:  7932  positive:  3852 negative:  4080
[test] total:  3400  positive:  1621 negative:  1779
        0.9713921568627452 0.9715483432864954 0.9689052640447221 0.9702158938286253
    dynamic
        0.8932982456140353 0.814053709703546 0.8446223287511214 0.8286744625249413
[data_set] positive:  5384 negative:  5859
[train] total:  7870  positive:  3758 negative:  4112
[test] total:  3373  positive:  1626 negative:  1747
        0.892845142800672 0.8850701644211423 0.8919247302312662 0.8884535338747492
    hybrid
        0.951499659168371 0.9060118829764485 0.9376116669519695 0.9213583012325692
[data_set] positive:  5473 negative:  5859
[train] total:  7932  positive:  3836 negative:  4096
[test] total:  3400  positive:  1637 negative:  1763
0.9749215686274508 0.9726773080950412 0.9753383200129355 0.9739975550583532
    Rbf kernel:
    static:
        0.9433878663940017 0.8991575028377627 0.9184884793662234 0.9084642241555336
.9777254901960787 0.9889213574565837 0.9647155614554721 0.9766625123668626
    dynamic:
        .8403157894736845 0.9032757973341501 0.5414197192520304 0.6742822547686658
0.9097143986559935 0.9105471189241653 0.8998238754910254 0.9051333088589898
    hybrid:
        .9446148602590322 0.8980981756083836 0.9204830411695476 0.908941614458882
[data_set] positive:  5473 negative:  5859
[train] total:  7932  positive:  3859 negative:  4073
[test] total:  3400  positive:  1614 negative:  1786
0.9806862745098037 0.9881607621670289 0.9715553385236816 0.9797794724960246
    '''
if __name__ == "__main__":
    import time
    print(time.time())
    train()
    print(time.time())

    #evaluate()