from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

from data_loader import (vectorization_main, vectorization_andmal2017, vectorization_mix, vectorization_hybrid)



def train():
    #X_train, X_test, y_train, y_test = vectorization_main()
    #X_train, X_test, y_train, y_test = vectorization_main(data_name = "drebin", feature_name = "dynamic.json")
    X_train, X_test, y_train, y_test = vectorization_hybrid(data_name = "drebin")
    
    #X_train, X_test, y_train, y_test = vectorization_andmal2017()
    #X_train, X_test, y_train, y_test = vectorization_mix()
    print(time.time())

    classifier=RandomForestClassifier(random_state=0)
    classifier.fit(X_train, y_train)
    print(time.time())

    y_pred = classifier.predict(X_train)
    acc = accuracy_score(y_train, y_pred)
    precision = precision_score(y_train, y_pred)
    recall = recall_score(y_train, y_pred)
    f1 = f1_score(y_train, y_pred)
    print(acc, precision, recall, f1)


    #score = classifier.score(X_test, y_test)
    y_pred = classifier.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    print(acc, precision, recall, f1)
    return acc, precision, recall, f1

def evaluate():
    result = []
    try_cnt = 30
    for i in range(try_cnt):
        result.append(train())
    acc = sum([result[i][0] for i in range(try_cnt)])/try_cnt
    pre = sum([result[i][1] for i in range(try_cnt)])/try_cnt
    rec = sum([result[i][2] for i in range(try_cnt)])/try_cnt
    f1 = sum([result[i][3] for i in range(try_cnt)])/try_cnt
    print(acc, pre, rec, f1) 
    '''
    derbin0 vs benign
        0.9604635310156779 0.966719876336477 0.8997544401225606 0.9318782426822927
    andmal2017 vs benign
        0.9562579013906449 0.9968358822463259 0.6864694142982386 0.8122672065800708
    
    derbin 
    static:
        0.9624062713019765 0.9681183078913401 0.9039190164160238 0.934815181804337
.9814411764705883 0.9936541514899645 0.9677918564293404 0.9805475805207776
    dynamic:
        0.9190877192982458 0.8954650802599262 0.833862735148588 0.863279654539309
0.9281846032216622 0.9218635648762864 0.9293450978764665 0.9255721091448991
0.9223243403498369 0.9198776758409786 0.9198776758409786 0.9198776758409786
    hybrid:
        0.9607021131561007 0.9632671397414578 0.9032759937383454 0.9321548409243671
0.981970588235294 0.9933511586434796 0.969172426802513 0.9811099102287988
    '''
if __name__ == "__main__":
    import time
    print(time.time())
    #train()
    print(time.time())

    evaluate()